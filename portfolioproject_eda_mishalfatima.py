# -*- coding: utf-8 -*-
"""PortfolioProject_EDA_MishalFatima.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QM6VccMUzaS6TkDcahp4fRAgy2nhZuei
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

df = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/aerofit__treadmill_data.csv")

df

df.info()

df.dtypes

df.duplicated().sum()

for column in df:
  print("-----------------------------------------------------------------------")
  print(column)
  print(df[column].isnull().sum())
  print(df[column].isna().sum())
  print(df[column].unique())
  print(df[column].nunique())
# df["Miles"].unique() checked if there were Null or NA values for each column

df.describe()

df.describe(include="object")

df["Product"].unique()

df["Gender"].unique()

df["MaritalStatus"].unique()

df["Product"].value_counts()

df["Gender"].value_counts()

df["MaritalStatus"].value_counts()

fig,axes =plt.subplots(nrows = 3, ncols = 1, figsize = (10,10))
sns.countplot(ax =axes[0], data=df["Product"])
sns.countplot(ax =axes[1], data=df["MaritalStatus"])
sns.countplot(ax =axes[2], data=df["Gender"])

fig,axes =plt.subplots(nrows = 2, ncols = 3, figsize = (16,10))
fig.suptitle("Distribution Plots")
sns.histplot(ax=axes[0,0],data=df['Age'])
sns.histplot(ax=axes[0,1],data=df['Education'])
sns.histplot(ax=axes[0,2],data=df['Usage'])
sns.histplot(ax=axes[1,0],data=df['Fitness'])
sns.histplot(ax=axes[1,1],data=df['Income'])
sns.histplot(ax=axes[1,2],data=df['Miles'])

fig,axes =plt.subplots(nrows = 2, ncols = 3, figsize = (16,10))
fig.suptitle("Box Plots")
sns.boxplot(ax=axes[0,0],data=df['Age'])
sns.boxplot(ax=axes[0,1],data=df['Education'])
sns.boxplot(ax=axes[0,2],data=df['Usage'])
sns.boxplot(ax=axes[1,0],data=df['Fitness'])
sns.boxplot(ax=axes[1,1],data=df['Income'])
sns.boxplot(ax=axes[1,2],data=df['Miles'])

sns.catplot(data = df, x =df["Product"], kind = "count", hue=df["Gender"])

sns.catplot(data = df, x =df["Product"], kind = "count", hue=df["MaritalStatus"])

df_age = pd.cut(df["Age"], bins =[15,20,25,30,35,40,45,50,55])
sns.catplot(data = df, x =df["Product"], kind = "count", hue=df_age)

sns.catplot(data = df, x =df["Product"], kind = "count", hue=df["Usage"],palette="tab10")

sns.catplot(data = df, x =df["Product"], kind = "count", hue=df["Education"],palette="tab10")

sns.catplot(data = df, x =df["Product"], kind = "count", hue=df["Fitness"],palette="tab10")

df_Miles=df["Miles"].groupby(df["Product"]).mean()
df_Miles

df_Miles=df["Miles"].groupby(df["Product"]).median()
df_Miles

sns.catplot(data =df, x="Product", y="Miles", kind="bar", estimator ="median")

df["Income"].max()

df["Income"].min()

df_Income = pd.cut(df["Income"], bins =[25000,45000,65000,85000,105000])
sns.catplot(data = df, x =df["Product"], kind = "count", hue=df_Income)

sns.pairplot(df,hue="Product")

sns.pairplot(df,hue="Gender")

sns.pairplot(df,hue="MaritalStatus")

df_num = df[["Age", "Education","Usage","Fitness","Income","Miles"]]
sns.heatmap(df_num.corr(),annot=True)

df_ProductPercent = pd.DataFrame({
    'Count': df["Product"].value_counts(),
    'Percentage': (df["Product"].value_counts(normalize=True) * 100).round(0)
})
df_ProductPercent

plt.pie(df_ProductPercent["Percentage"],labels=df_ProductPercent.index,autopct="%1.1f%%",colors=sns.color_palette("pastel"))
plt.title("Product Sales")

df_GenderPercent = pd.DataFrame({
    "Count": df["Gender"].value_counts(),
    "Percentage": (df["Gender"].value_counts(normalize=True) * 100).round(0)
})
df_GenderPercent

plt.pie(df_GenderPercent["Percentage"],labels=df_GenderPercent.index,autopct="%1.1f%%",colors=sns.color_palette("pastel"))
plt.title("Product Sales by Gender")

df_MaritalStatusPercent = pd.DataFrame({
    "Count": df["MaritalStatus"].value_counts(),
    "Percentage": (df["MaritalStatus"].value_counts(normalize=True) * 100).round(0)
})
df_MaritalStatusPercent

plt.pie(df_MaritalStatusPercent["Percentage"],labels=df_MaritalStatusPercent.index,autopct="%1.1f%%",colors=sns.color_palette("pastel"))
plt.title("Product Sales by Marital Status")

df_MaritalProductPercent = pd.DataFrame({
    "Count": df["MaritalStatus"].groupby(df["Product"]).value_counts(),
    "Percentage": (df["MaritalStatus"].groupby(df["Product"]).value_counts(normalize=True) * 100).round(0)
})
df_MaritalProductPercent

df_GenderProductPercent = pd.DataFrame({
    "Count": df["Gender"].groupby(df["Product"]).value_counts(),
    "Percentage": (df["Gender"].groupby(df["Product"]).value_counts(normalize=True) * 100).round(0)
})
df_GenderProductPercent

dftemp_AgePercent = pd.cut(df["Age"], bins =[15,20,30,40,55], labels =["below 20", "20s", "30s", "above 30"])
df_AgePercent = pd.DataFrame({
    "Count": dftemp_AgePercent.value_counts(),
    "Percentage": (dftemp_AgePercent.value_counts(normalize=True) * 100).round(0)
})
df_AgePercent

dftemp_AgePercent = pd.cut(df["Age"], bins =[15,20,30,40,55], labels =["below 20", "20s", "30s", "above 30"])
df_AgePercent = pd.DataFrame({
    "Count": dftemp_AgePercent.groupby(df["Product"]).value_counts(),
    "Percentage": (dftemp_AgePercent.groupby(df["Product"]).value_counts(normalize=True) * 100).round(0)
})
df_AgePercent

plt.pie(df_AgePercent["Percentage"],labels=df_AgePercent.index,autopct="%1.1f%%",colors=sns.color_palette("pastel"))
plt.title("Product Sales by Age")

mean_income =df["Income"].mean()
mean_income

std_income =df["Income"].std()
std_income

mean_income =df["Income"].mean()
std_income =df["Income"].std()
dftemp_IncomePercent = pd.cut(df["Income"], bins =[0, mean_income-std_income,mean_income+std_income,float('inf')], labels =["Low", "Medium","High"])
df_IncomePercent = pd.DataFrame({
    "Count": dftemp_IncomePercent.value_counts(),
    "Percentage": (dftemp_IncomePercent.value_counts(normalize=True) * 100).round(0)
})
df_IncomePercent

plt.pie(df_IncomePercent["Percentage"],labels=df_IncomePercent.index,autopct="%1.1f%%",colors=sns.color_palette("pastel"))
plt.title("Product Sales by Income")

mean_income =df["Income"].mean()
std_income =df["Income"].std()
dftemp_IncomePercent = pd.cut(df["Income"], bins =[0, mean_income-std_income,mean_income+std_income,float('inf')], labels =["Low", "Medium","High"])
df_IncomePercent = pd.DataFrame({
    "Count": dftemp_IncomePercent.groupby(df["Product"]).value_counts(),
    "Percentage": (dftemp_IncomePercent.groupby(df["Product"]).value_counts(normalize=True) * 100).round(0)
})
df_IncomePercent

df_IncomePercent[(df_IncomePercent.index.get_level_values('Income') == "High")& (df_IncomePercent.index.get_level_values('Product') == "KP781")]

df3=df[(dftemp_IncomePercent =="High")& (df["Product"] == "KP781")]
df3_count=df3.value_counts().sum()
df3_percent =((df3_count/180) * 100).round(0)
df3_percent

df_FitnessPercent = pd.DataFrame({
    "Count": df["Fitness"].value_counts(),
    "Percentage": (df["Fitness"].value_counts(normalize=True) * 100).round(0)
})
df_FitnessPercent.sort_index()

plt.pie(df_FitnessPercent["Percentage"],labels=df_FitnessPercent.index,autopct="%1.1f%%",colors=sns.color_palette("pastel"))
plt.title("Customer Fitness Percentage")

df_FitnessPercent = pd.DataFrame({
    "Count": df["Fitness"].groupby(df["Product"]).value_counts(),
    "Percentage": (df["Fitness"].groupby(df["Product"]).value_counts(normalize=True) * 100).round(0)
})
df_FitnessPercent.sort_index()

df_FitnessPercent[(df_FitnessPercent.index.get_level_values("Product")=="KP781")&(df_FitnessPercent.index.get_level_values("Fitness")==5)]

df2=df[(df['Fitness']==5) & (df['Product']=='KP781')]
df2_count=df2.value_counts().sum()
df2_percent =((df2_count/180) * 100).round(0)
df2_percent

df_num.columns

df_num_userinfo = df_num[["Age","Education","Income"]]
df_num_userinfo
for columns in df_num_userinfo:
  print("-----------------------------------------------------------------------")
  print(columns)
  q1 = np.percentile(df_num_userinfo[columns], 25)
  q3 = np.percentile(df_num_userinfo[columns], 75)
  iqr = q3 - q1
  upper_bound = q3 + (1.5 * iqr)
  lower_bound = q1 - (1.5 * iqr)
  outliers = df_num_userinfo[(df_num_userinfo[columns]>upper_bound)|(df_num_userinfo[columns]<lower_bound)]
  print(f"Lower Bound: {lower_bound}")
  print(f"Upper Bound: {upper_bound}")
  print(f"Outliers in {columns} : {len(outliers)} \n {outliers}")